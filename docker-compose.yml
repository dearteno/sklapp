version: '3'
services:

  postgres-db:
    image: postgres:15-alpine
    container_name: postgres-db
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=nodejs_secrete
      - POSTGRES_USER=nodejs_user
      - POSTGRES_DB=nodejs_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
     - backend

  reverse-proxy:
    image: nginx:alpine
    container_name: nginx-reverse-proxy
    volumes:
      - ./apps/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    networks:
      - frontend

  nodejs-app:
    build: ./apps/node-js
    container_name: nodejs-app
    entrypoint: ./docker-entrypoint.sh
    environment:
      NODE_ENV: production
      DB_HOST: postgres-db
      DB_PORT: 5432
      DB_USER: nodejs_user
      DB_PASSWORD: nodejs_secrete
      DB_NAME: nodejs_db

    networks:
     - frontend
     - backend

volumes:
  db:
    driver: local
networks:
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: dockerfront
    
  backend:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: dockerback
